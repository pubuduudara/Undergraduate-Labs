1. 
SET profiling = 1;

SELECT (first_name) 
FROM employees 
ORDER BY first_name ASC;

SHOW PROFILES;

+----------+------------+--------------------------------------------------------------+
| Query_ID | Duration   | Query                                                        |
+----------+------------+--------------------------------------------------------------+
|        1 | 3.00618250 | SELECT (first_name)
FROM employees
ORDER BY first_name ASC |
+----------+------------+--------------------------------------------------------------+

Execution time is 3.00618250 seconds

2. 

CREATE INDEX `​fname_index` ON employees (first_name);

SET profiling = 1;

SELECT (first_name) 
FROM employees 
ORDER BY first_name ASC;

SHOW PROFILES;

+----------+------------+--------------------------------------------------------------+
| Query_ID | Duration   | Query                                                        |
+----------+------------+--------------------------------------------------------------+
|       23 | 0.00014375 | SET profiling = 1                                            |
|       24 | 0.00031575 | SET profiling = 1                                            |
|       25 | 0.20991025 | SELECT (first_name)
FROM employees
ORDER BY first_name ASC |
+----------+------------+--------------------------------------------------------------+

Execution time is 0.20991025 seconds

Therefore, performance improvement = (3.00618250-0.20991025) = 2.79627225 seconds

3.

​SHOW INDEX FROM employees;

+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| Table     | Non_unique | Key_name     | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |
+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| employees |          0 | PRIMARY      |            1 | emp_no      | A         |      300024 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |
| employees |          1 | ?fname_index |            1 | first_name  | A         |        1276 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |
+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+

In addition to the primary key emp_no, Here we can see an existing index on the ​employees ​table named fname_index with an entry for each ​Column_name used as its key : first_name
Both column sequence numbers are started in 1 (Seq_in_index=1)
fname_index can have duplicates (Non_unique =1) and it may containg null values as well
Columns sorted in ascending order (collation =A)
Estimated unique values in the fname_index is 1276
The entire column in fname_index is indexed (Sub_part=NULL)
Keys are not packed (Pakced =NULL)
Both index and primary key used BTREE methods
Both indexe and primary key are visible to the optimizer

4.

# drop previous added index fname_index
DROP INDEX `?fname_index` ON employees;

#add new indexes
CREATE UNIQUE INDEX `​new_index` ON employees (emp_no,first_name,last_name);

#execute query

SET profiling = 1;

SELECT (first_name) 
FROM employees 
ORDER BY first_name ASC;

SHOW PROFILES;

+----------+------------+--------------------------------------------------------------+
| Query_ID | Duration   | Query                                                        |
+----------+------------+--------------------------------------------------------------+
|        1 | 0.68930300 | SELECT (first_name)
FROM employees
ORDER BY first_name ASC |
+----------+------------+--------------------------------------------------------------+

Execution time is 0.68930300 seconds

The perfromance has decreased.

In this case multi-column index is used. The query has a single attribute. When mult-column index is created using emp_no,first_name,last_name the higher priority goes to the left most emp_no during the execution. Therefore, the system will not perform as expected since the query do not have an impact on emp_no. In above case it is used only first_name as the index and it is what query executes with. Therefore, query execution time increased in this than the previous case


5

i).

Answer is 'from_date', due to following reasons

1). It is included in the 'WHERE' clause
2). Number of unique 'dept_no' are 9
	Numbbr of unique 'from_date' are 16

	Therefore, though both 'dept_no' and 'from_date' are included in the 'WHERE' clause, since 'from_date' has a higher degree of uniqueness it performs well a the index


ii)

EXPLAIN select distinct emp_no from dept_manager where from_date>=1985-01-01 and dept_no>= 'd005';

+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
| id | select_type | table        | partitions | type  | possible_keys  | key    | key_len | ref  | rows | filtered | Extra       |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | dept_manager | NULL       | index | PRIMARY,emp_no | emp_no | 4       | NULL |   24 |    19.44 | Using where |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+


EXPLAIN select distinct emp_no from dept_manager where from_date>=1996-01-03 and dept_no>= 'd005';

+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
| id | select_type | table        | partitions | type  | possible_keys  | key    | key_len | ref  | rows | filtered | Extra       |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | dept_manager | NULL       | index | PRIMARY,emp_no | emp_no | 4       | NULL |   24 |    19.44 | Using where |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+

EXPLAIN select distinct emp_no from dept_manager where from_date>=1985-01-01 and dept_no<= 'd009';

+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
| id | select_type | table        | partitions | type  | possible_keys  | key    | key_len | ref  | rows | filtered | Extra       |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | dept_manager | NULL       | index | PRIMARY,emp_no | emp_no | 4       | NULL |   24 |    33.33 | Using where |
+----+-------------+--------------+------------+-------+----------------+--------+---------+------+------+----------+-------------+

For each 3 queries MYSQL storage engine has used the primary key (emp_no) as the index.

Since this dept_manager table does not have many rows it doesn't need to create a seperate index. The primary key has a higher degree of uniquness. Therefore, it can be used to identify each row uniquely. 'WHERE' statement doesn't have a higher impact on the execution time because the number of rows are small in the table

6.

2) 'last_name'. Because it is the only attribute selected in the particular query. 
	Since it is not the primary key, inorder to reduce query execution time it is better to use 'last_name' as the index

3) In addition to primary keys on title(emp_no) and dept_emp(emp_no), 'title' in the title table and 'dept_no' in the dept_emp table. 
	Since there is a conitonal check inside the 'WHERE' to find whether the given title is belong to particular department. And also these attributes are used to build the connection between tables.

4) In addtion to primary keys (employees.emp_no,dept_manager.emp_no, titles.emp_no), employees.sex and titles.title 
   Since there are join condtions between tables, it is better to use attributes as indexes which used in the join conditions
   employees.sex and titles.title used inside the 'WHERE' clause.

5) In addtion to primary keys (titles.emp_no,dept_emp.emp_no,departments.dept_no,salaries.emp_no), salaries.salary is better to use
   Since there are join condtions between tables, it is better to use attributes as indexes which used in the join conditions
   salaries.salary is used as a index in the salary table becase it's inside a 'WHERE' clause

   for part ii) of the same question additionally departments.dept_name can be used. Because it used in the GROUP BY constraint

6)	employees.birth_date,employees.hire_date
	These two attrbutes used inside the WHERE clause for conditions.

7)	In addtion to primary keys (employees.emp_no,dept_emp.emp_no), dept_emp.dept_no 
	dept_emp.dept_no is used inside the WHERE clause

8)	In addtion to primary keys (employees.emp_no,salaries.emp_no,dept_emp.emp_no), salaries.salary, dept_emp.dept_no,salaries.salary
	dept_emp.dept_no is used in the JOIN operation
	salaries.salary is used in the nested SELECT statement inside the first WHERE

9)	In addtion to primary keys (employees.emp_no,salaries.emp_no), salaries.salary
	salaries.salary used inside the WHERE clause and nested SELECT statement

10) In addtion to primary keys (titles.emp_no,salaries.emp_no), titles.title,salaries.salary
	titles.title used inside the WHERE clause
	salaries.salary used inside the nested SELECT statement
 
7.
If the data is updated more frequently then database engine requires updating all the indexes and sort them accordingly, thus too many indexes will slows down the performance. Adding data to an index means that the index will have to update. As data gets deleted, you have to delete data from the index. All these can impact performance of the system. Therefor, query exection time will increase





