#------------------- Numpy Section ----------------

2.1 Creation

>>a=np.array([1,2,3])

>>a.dtype # return the data type of the array
dtype('int32')

>>matrix = np.array ([np.arange (3), [i for i in range(1 ,4)],[6 ,7 ,8]])
>>print(matrix)
[[0 1 2]
 [1 2 3]
 [6 7 8]]

 >>np.zeros((5,2,2),dtype=float) # array of all zero of float data type
array([[[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]]])

>>np.ones((4,5)) # array full of oneâ€™s
array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])

>>np.empty([3,4]) #array which initial content is random
array([[6.67483769e-312, 3.16202013e-322, 0.00000000e+000,
        0.00000000e+000],
       [6.23060404e-307, 1.54800582e+185, 2.64420575e+180,
        8.97916543e-067],
       [1.46151730e+165, 3.57807651e-061, 4.43137220e+175,
        2.48828705e+180]])

>>np.arange (2 ,10 ,2) # array with evenly spaced values
array([2, 4, 6, 8])

>>np.arange (2 ,10 ,1).reshape(4,2) #rearranging the size of the array
array([[2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])

>>np.full ([2 ,3] , 4) # creates an array with constant values
array([[4, 4, 4],
       [4, 4, 4]])

>>np.eye(3) # creates an identity matrix
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])

>>np.linspace (2 ,3,5) # creates an evenly spaced array within specified
array([2.  , 2.25, 2.5 , 2.75, 3.  ])

>>np.copy(matrix) #returns the copy of the object
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])

>>matrix.view() #shallow copy
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])

>>matrix.sort()
>>print(matrix)
[[0 1 2]
 [1 2 3]
 [6 7 8]]

>>matrix.sort(axis=1) #sort along the specified axis
>>print(matrix)
[[0 1 2]
 [1 2 3]
 [6 7 8]]

>>matrix [0: ,:1] # 2D array slicing
array([[0],
       [1],
       [6]])

>> matrix [:2, 0:2]
array([[0, 1],
       [1, 2]])

>>matrix [:1, :]
array([[0, 1, 2]])


>>matrix = np.array ([np.arange (3), [i for i in range(1 ,4)],[6 ,7 ,8]])

>>matrix [1,0]
1

>>matrix [0] = 42
>>print(matrix)
[[42 42 42]
 [ 1  2  3]
 [ 6  7  8]]

>>matrix [1:3]
array([[1, 2, 3],
       [6, 7, 8]])

>>matrix []

>>matrix [1:]
array([[1, 2, 3],
       [6, 7, 8]])

>>matrix [1:100]
array([[1, 2, 3],
       [6, 7, 8]])

>>matrix [:]
array([[42, 42, 42],
       [ 1,  2,  3],
       [ 6,  7,  8]])

>>matrix [1: ,:2]
array([[1, 2],
       [6, 7]])

>>matrix [:2, 1:]
array([[42, 42],
       [ 2,  3]])

>>matrix.ravel ()
array([42, 42, 42,  1,  2,  3,  6,  7,  8])

>>matrix [: ,1].copy ()
array([42,  2,  7])

>>matrix[1].tolist()
[1, 2, 3]

>>matrix.reshape(-1)
array([42, 42, 42,  1,  2,  3,  6,  7,  8])


2.4.1 Try out

>>matrix = np.array ([np.arange (3), [i for i in range(1 ,4)],[6 ,7 ,8]]) # redefine the matrix as previous

>>print(matrix)
[[0 1 2]
 [1 2 3]
 [6 7 8]]

>>np.sqrt(matrix)
array([[0.        , 1.        , 1.41421356],
       [1.        , 1.41421356, 1.73205081],
       [2.44948974, 2.64575131, 2.82842712]])

>>np.exp(matrix)
array([[1.00000000e+00, 2.71828183e+00, 7.38905610e+00],
       [2.71828183e+00, 7.38905610e+00, 2.00855369e+01],
       [4.03428793e+02, 1.09663316e+03, 2.98095799e+03]])

>>np.min(matrix)
0

>>np.max(matrix, axis=1)
array([2, 3, 8])

>>np.min(np.maximum(np.random.randn(4),np.random.randn(4)))
-0.5986668241646684

>>np.mean(matrix)
3.3333333333333335

>>np.mean(matrix, axis=0)
array([2.33333333, 3.33333333, 4.33333333])

>>np.sum(matrix)
30

>>np.invert(matrix)
array([[-1, -2, -3],
       [-2, -3, -4],
       [-7, -8, -9]], dtype=int32)

>>np.random.randn(5)
array([-0.26052834,  0.52313883, -0.66818334,  1.59079635, -0.75843648])

>>np.trace(matrix)
10


 5. Lab Exercise (Random walk)

import numpy as np
from matplotlib import pyplot
class RandomWlak: # create class for the random wlak
    def __init__(self,position):
        self.position=position # take current position as the argument
    
    def walk(self):
        current_position=self.position # set the current position
        walked_path=np.zeros((1,500), int) # numpy array to save positions
        for i in range(500): # iterate for 500 times
            step=np.random.choice([-1,1]) # randomly select -1 or 1
            current_position+=step # set the current postion accordingly
            walked_path[0,i]=current_position # save positions
      
        return walked_path # return full path

obj=RandomWlak(4) # start at 4
path=obj.walk()
pyplot.plot(path[0,:]) # ploi walk
pyplot.xlabel("Step Number")
pyplot.ylabel("Current Position")
pyplot.show()