

#------------------- Pandas Section ----------------

>>import pandas as pd # import pandas module as pd

ToDo 1: What is the data type of s? Can it be changed?

>>s = pd.Series([1,4,-2,'home'],index=['a','b','c','d'])

>>print(s.dtype)
object

This can not be changed as a fully sereis because it contains intgers as well as strings. Therefore as a whole this can not be changed 

>>data={'population':[1.5,1.2,2.0,1.4,0.8],'state':['Nevada','Florida','Ohio','Texas','Florida'],'year':[2003,2000,2004,1990,1994]}

>>df=pd.DataFrame(data,index=['one','two','three','four','five'],columns=['year','state','population','debt'])

>>print(df)
       year    state  population debt
one    2003   Nevada         1.5  NaN
two    2000  Florida         1.2  NaN
three  2004     Ohio         2.0  NaN
four   1990    Texas         1.4  NaN
five   1994  Florida         0.8  NaN

4.2.2 Accessing and modifying

>>s[1:3]
b     4
c    -2
dtype: object

>>s[0]
1

>>s['d']
'home'

>>s.values[2:]
array([-2, 'home'], dtype=object)

>>df[['population','state']]
 	population 	state
one 	1.5 	Nevada
two 	1.2 	Florida
three 	2.0 	Ohio
four 	1.4 	Texas
five 	0.8 	Florida

>>df.population
one      1.5
two      1.2
three    2.0
four     1.4
five     0.8
Name: population, dtype: float64

>>df.iloc[1:]
 	year 	state 	population 	debt
two 	2000 	Florida 	1.2 	NaN
three 	2004 	Ohio 	2.0 	NaN
four 	1990 	Texas 	1.4 	NaN
five 	1994 	Florida 	0.8 	NaN

>>df.iloc[2:4:,2:5]
 	population 	debt
three 	2.0 	NaN
four 	1.4 	NaN

>>df.loc['one']
year            2003
state         Nevada
population       1.5
debt             NaN
Name: one, dtype: object

>>df.debt=34.67
>>print(df)
      year    state  population   debt
one    2003   Nevada         1.5  34.67
two    2000  Florida         1.2  34.67
three  2004     Ohio         2.0  34.67
four   1990    Texas         1.4  34.67
five   1994  Florida         0.8  34.67

>>df.debt=[df.iloc[:,2][i]*5 for i in range(0,df.shape[0])]
>>print(df)
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0

>>df.head()
 	year 	state 	population 	debt
one 	2003 	Nevada 	1.5 	7.5
two 	2000 	Florida 	1.2 	6.0
three 	2004 	Ohio 	2.0 	10.0
four 	1990 	Texas 	1.4 	7.0
five 	1994 	Florida 	0.8 	4.0

>>df.tail(2)
 	year 	state 	population 	debt
four 	1990 	Texas 	1.4 	7.0
five 	1994 	Florida 	0.8 	4.0

>>df.sample(n=3)
 	year 	state 	population 	debt
one 	2003 	Nevada 	1.5 	7.5
two 	2000 	Florida 	1.2 	6.0
three 	2004 	Ohio 	2.0 	10.0

>>df['newColomn']=pd.Series(np.random.randn(df.shape[0]),index=df.index)
>>print(df)
       year    state  population  debt  newColomn
one    2003   Nevada         1.5   7.5  -0.252014
two    2000  Florida         1.2   6.0   0.338169
three  2004     Ohio         2.0  10.0  -1.475429
four   1990    Texas         1.4   7.0   0.373656
five   1994  Florida         0.8   4.0  -1.154392

>>df.drop_duplicates('state')
 	year 	state 	population 	debt 	newColomn
one 	2003 	Nevada 	1.5 	7.5 	-0.252014
two 	2000 	Florida 	1.2 	6.0 	0.338169
three 	2004 	Ohio 	2.0 	10.0 	-1.475429
four 	1990 	Texas 	1.4 	7.0 	0.373656

>>df.state
one       Nevada
two      Florida
three       Ohio
four       Texas
five     Florida
Name: state, dtype: object

4.2.3 Loading data from CSV file

>>df=pd.read_csv('sampleDataSet.csv') # without setting names
>>df = pd.read_csv('sampleDataSet.csv', names=['a', 'b', 'c', 'd', 'e', 'f','g','h','i'])
>>df.head()
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.5 	0.625000 	1.4 	0.067797 	0.2 	0.041666667 	setosa
1 	4.9 	0.166667 	3.0 	0.416667 	1.4 	0.067797 	0.2 	0.041666667 	setosa
2 	4.7 	0.111111 	3.2 	0.500000 	1.3 	NaN 	0.2 	0.041666667 	setosa
3 	4.6 	0.083333 	3.1 	0.458333 	1.5 	0.084746 	0.2 	0.041666667 	setosa
4 	NaN 	0.194444 	3.6 	0.666667 	1.4 	NaN 	0.2 	0.041666667 	setosa

ToDo 2: Comment on the shape of the data frame with and without setting names
>>print(df.shape)
(100, 9)

without setting names (100,9)
with setting names (101,9)

>>df.isnull().g
0     False
1     False
2     False
3     False
4     False
      ...  
95    False
96    False
97    False
98    False
99    False
Name: g, Length: 100, dtype: bool

>>df.isnull().sum(0)
a    4
b    1
c    0
d    3
e    2
f    2
g    1
h    1
i    1
dtype: int64

>>df=df[df.isnull().a != True]
>>df.head()
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.5 	0.625000 	1.4 	0.067797 	0.2 	0.041666667 	setosa
1 	4.9 	0.166667 	3.0 	0.416667 	1.4 	0.067797 	0.2 	0.041666667 	setosa
2 	4.7 	0.111111 	3.2 	0.500000 	1.3 	NaN 	0.2 	0.041666667 	setosa
3 	4.6 	0.083333 	3.1 	0.458333 	1.5 	0.084746 	0.2 	0.041666667 	setosa
7 	5.0 	0.194444 	3.4 	NaN 	1.5 	0.084746 	0.2 	0.041666667 	setosa

>>df.dropna(axis=0).isnull().sum()
a    0
b    0
c    0
d    0
e    0
f    0
g    0
h    0
i    0
dtype: int64

>>df.dropna(axis=1)
 	a 	c
0 	5.1 	3.500000
1 	4.9 	3.000000
2 	4.7 	3.200000
3 	4.6 	3.100000
7 	5.0 	3.400000
... 	... 	...
95 	7.2 	3.000000
96 	7.4 	0.333333
97 	7.9 	3.800000
98 	6.4 	2.800000
99 	6.3 	2.800000

>>df.dropna(axis=1, how='all')
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	NaN 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	NaN 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	NaN 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	NaN
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica

>>df.dropna(axis=1, thresh=1)
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	NaN 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	NaN 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	NaN 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	NaN
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica

>>df.drop('i',axis=1)
 	a 	b 	c 	d 	e 	f 	g 	h
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	NaN 	0.20 	0.041666667
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667
7 	5.0 	0.194444 	3.400000 	NaN 	1.500000 	0.084746 	0.20 	0.041666667
... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625
96 	7.4 	NaN 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333

>>df.fillna(899)
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	899.000000 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	899.000000 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	899.000000 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	899
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica

>>df.fillna(method='ffill')

 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	0.067797 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	0.805556 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	virginica
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica

>>df.replace(6.3,600)
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	NaN 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	NaN 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	NaN 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	NaN
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	600.0 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica

>>df.replace('.',np.nan)
 	a 	b 	c 	d 	e 	f 	g 	h 	i
0 	5.1 	0.222222 	3.500000 	0.625000 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
1 	4.9 	0.166667 	3.000000 	0.416667 	1.400000 	0.067797 	0.20 	0.041666667 	setosa
2 	4.7 	0.111111 	3.200000 	0.500000 	1.300000 	NaN 	0.20 	0.041666667 	setosa
3 	4.6 	0.083333 	3.100000 	0.458333 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
7 	5.0 	0.194444 	3.400000 	NaN 	1.500000 	0.084746 	0.20 	0.041666667 	setosa
... 	... 	... 	... 	... 	... 	... 	... 	... 	...
95 	7.2 	0.805556 	3.000000 	0.416667 	5.800000 	0.813559 	1.60 	0.625 	virginica
96 	7.4 	NaN 	0.333333 	6.100000 	0.864407 	1.900000 	0.75 	virginica 	NaN
97 	7.9 	0.999900 	3.800000 	0.750000 	6.400000 	0.915254 	2.00 	0.791666667 	virginica
98 	6.4 	0.583333 	2.800000 	0.333333 	5.600000 	0.779661 	2.20 	0.875 	virginica
99 	6.3 	0.555556 	2.800000 	0.333333 	5.100000 	0.694915 	1.50 	0.583333333 	virginica


4.2.5 Applying functions

>>f=lambda df: df.max()-df.min()

def f(x):
    return x.max()-x.min()

>>df.iloc[: ,3:5].apply(f)
d    6.090000
e    6.035593
dtype: float64

4.2.6 Group Operations

>>grouped=df[['a','b','e']].groupby(df['i'])
>>print(grouped.mean())
                   a         b         e
i                                       
setosa      5.034483  0.204368  1.471429
versicolor  6.026471  0.479575  4.315152
virginica   6.625000  0.645830  5.634375

>>grouped=df[['a','b','e']].groupby([df['i'],df['c']]).mean()
>>print(grouped.unstack())

               a                                                          \
c            2.9   3.0       3.1       3.2  3.3       3.4       3.5  3.6   
i                                                                          
setosa      4.40  4.75  4.766667  4.700000  5.1  5.085714  5.133333  4.6   
versicolor  6.14  6.20  6.800000  6.433333  6.3       NaN       NaN  NaN   
virginica   6.80  6.95       NaN  6.750000  6.5       NaN       NaN  7.2   

                       ...    e                                                 
c            3.7  3.8  ...  4.0  4.4  2.0   2.2  2.3  2.4  2.5  2.6  2.7   2.8  
i                      ...                                                      
setosa      5.25  5.4  ...  1.2  1.5  NaN   NaN  NaN  NaN  NaN  NaN  NaN   NaN  
versicolor   NaN  NaN  ...  NaN  NaN  3.5  4.25  4.0  3.6  4.4  3.5  4.3  4.52  
virginica    NaN  7.8  ...  NaN  NaN  NaN  5.00  NaN  NaN  5.1  6.9  5.1  5.40  


4.2.7 Data Summarizing

>>df['a'].nunique() # number of distinct values in a column
'a'

>>df['a'].value_counts() # count the number of rows for each unique value
6.4    6
6.3    6
5.8    5
5.7    5
5.1    5
5.0    4
6.5    4
6.0    4
5.4    4
5.6    4
4.8    4
4.9    4
6.7    4
5.2    3
5.5    3
7.7    3
6.1    3
7.2    3
6.8    2
4.6    2
6.6    2
5.9    2
4.7    2
6.9    2
6.2    2
7.6    1
7.0    1
4.4    1
7.4    1
7.1    1
7.9    1
4.3    1
7.3    1
Name: a, dtype: int64

>>df.describe() # descriptive statistics for each column
 	a 	b 	c 	d 	e 	f 	g
count 	96.000000 	95.000000 	96.000000 	93.000000 	94.000000 	95.000000 	95.000000
mean 	5.940625 	0.451566 	2.997222 	0.485053 	3.880472 	0.509489 	1.222632
std 	0.856502 	0.235253 	0.513301 	0.616023 	1.785482 	0.328692 	0.743009
min 	4.300000 	0.010000 	0.333333 	0.010000 	0.864407 	0.010000 	0.100000
25% 	5.200000 	0.250000 	2.800000 	0.333333 	1.600000 	0.110169 	0.400000
50% 	5.900000 	0.444444 	3.000000 	0.416667 	4.500000 	0.593220 	1.400000
75% 	6.500000 	0.611111 	3.300000 	0.541667 	5.100000 	0.694915 	1.800000
max 	7.900000 	0.999900 	4.400000 	6.100000 	6.900000 	1.900000 	2.500000

>>df.mean()
a    5.940625
b    0.451566
c    2.997222
d    0.485053
e    3.880472
f    0.509489
g    1.222632
dtype: float64


>>df.sort_index().head()
     a         b    c         d    e         f    g            h       i
0  5.1  0.222222  3.5  0.625000  1.4  0.067797  0.2  0.041666667  setosa
1  4.9  0.166667  3.0  0.416667  1.4  0.067797  0.2  0.041666667  setosa
2  4.7  0.111111  3.2  0.500000  1.3       NaN  0.2  0.041666667  setosa
3  4.6  0.083333  3.1  0.458333  1.5  0.084746  0.2  0.041666667  setosa
7  5.0  0.194444  3.4       NaN  1.5  0.084746  0.2  0.041666667  setosa

4.3 Try Out

1.
>>df=pd.read_csv('lab02Exercise01.csv',names=['Channel1','Channel2','Channel3','Channel4','Channel5'])

2.
>>df.isnull().sum()
Channel1     3
Channel2    11
Channel3    13
Channel4     4
Channel5     9
dtype: int64

df=df.apply(lambda x: x.fillna(x.mean()),axis=0)

3.

 df['class']=df.apply(lambda row: 1 if ((row.Channel1+row.Channel5)/2 < (row.Channel2+row.Channel3+row.Channel4)/3) else 0,axis = 1)





    
